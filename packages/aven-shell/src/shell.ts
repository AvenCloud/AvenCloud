import fetch from "node-fetch";
import * as JSTT from "json-schema-to-typescript";
import { writeFile } from "fs-extra";
import minimist from "minimist";

const REMOTE_HOST = process.env.AVEN_REMOTE_HOST || "aven.io";
const REMOTE_SSL = process.env.AVEN_REMOTE_SSL !== "false";

export async function pull(siteName: string, apiKey?: string): Promise<any> {
  const res = await fetch(`http${REMOTE_SSL ? "s" : ""}://${REMOTE_HOST}/api/site-schema`, {
    method: "post",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ name: siteName }),
  });
  const resp = await res.json();
  const { siteSchema } = resp;
  const allRecords: any = {};
  for (const nodeKey in siteSchema) {
    const node = siteSchema[nodeKey];
    if (node?.type === "record") {
      allRecords[nodeKey] = node;
    } else {
      console.error({ e: 111, nodeKey, node, time: Date.now() });
      throw new Error(`Cannot handle schema type of "${nodeKey}" `);
    }
  }
  const moduleExports = [];
  const definedTypes: any = {};
  for (const recordKey in allRecords) {
    const record = allRecords[recordKey];
    const typeDef = await JSTT.compile(record.record, recordKey, {
      bannerComment: "",
    });
    const typeKeyMatch = typeDef.match(/^export type (.*) =/);
    const typeKey = typeKeyMatch && typeKeyMatch[1];
    if (!typeKey) {
      console.error({ e: 112, typeDef, record, recordKey });
      throw new Error("Failed ts compilation");
    }
    definedTypes[recordKey] = typeKey;

    moduleExports.push(typeDef);
  }
  moduleExports.push(`
export type SiteSchema = {
${Object.entries(definedTypes)
  .map(([recordKey, typeKey]) => `  "${recordKey}": ${typeKey};`)
  .join("\n")}
}`);
  moduleExports.push(`
const Cloud = createClient<SiteSchema>({
  siteName: "${siteName}",
});
export default Cloud;
`);
  moduleExports.push(`
export type CloudLoad = SiteLoad<SiteSchema>;
`);
  const genFile = `
/* tslint:disable */

/**
 * This file was automatically generated by Aven CLI.
 * DO NOT MODIFY IT BY HAND. Instead, modify the Aven Cloud schema and re-run 'aven pull'
 */

import { createClient, SiteLoad } from "@aven/client";

${moduleExports.join("\n")}
`;
  const genFileLocation = `Cloud-${siteName}-Generated.ts`;
  await writeFile(genFileLocation, genFile);
  return { genFile, genFileLocation, definedTypes };
}

export function handleCli(argv: string[]): void {
  const args: CLIArgs = minimist(argv.slice(2));
  if (args.h === true) {
    console.log(`
Aven CLI tool

Usage:
aven pull SITE_NAME

        `);
  }

  const action = args._[0];
  if (action === "pull") {
    pull(args._[1])
      .then(({ definedTypes, genFileLocation, exportedInterfaces, genFile }) => {
        console.log(`Pulled ${Object.entries(definedTypes).length} properties to ${genFileLocation}`);
      })
      .catch((e) => {
        console.error("eerrorr", e);
      });
    return;
  }
  console.log("Command not found. Try -h");
  return;
}

type CLIArgs = {
  _: string[];
  h?: boolean;
};
