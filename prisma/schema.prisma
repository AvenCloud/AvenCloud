datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserPrivilege {
  NONE
  MEMBER
  VIP
}

model User {
  id              Int                  @id @default(autoincrement())
  username        String               @unique
  email           String?              @unique
  phone           String?              @unique
  name            String?
  passwordHash    String?
  publicBio       String?
  billing         Json?
  Comment         Comment[]
  privilege       UserPrivilege        @default(NONE)
  Sites           Site[]
  EmailValidation EmailValidation[]
  VerifiedEmail   VerifiedEmail[]
  SiteRole        SiteRole[]
  NodeRole        NodeRole[]
  SiteInvite      SiteRoleInvitation[] @relation("InviteSenderRelation")
  SiteInviteSent  SiteRoleInvitation[] @relation("InviteRecipientRelation")
  DeviceToken     DeviceToken[]
  SiteEvent       SiteEvent[]
  BillingEvent    BillingEvent[]
}

model BillingEvent {
  id      Int      @id @default(autoincrement())
  time    DateTime
  type    String
  payload Json?
  userId  Int?
  user    User?    @relation(fields: [userId], references: [id])
}

model DeviceToken {
  id          Int       @id @default(autoincrement())
  token       String    @unique
  type        String?
  name        String
  requestTime DateTime  @default(now())
  approveTime DateTime?
  originIp    String?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
}

model EmailValidation {
  id        Int      @id @default(autoincrement())
  emailTime DateTime @default(now())
  email     String
  secret    String   @unique
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model VerifiedEmail {
  email      String   @id
  verifyTime DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

model PhoneValidation {
  id       Int      @id @default(autoincrement())
  sendTime DateTime @default(now())
  phone    String
  secret   String   @unique
}

model Comment {
  id          Int      @id @default(autoincrement())
  publishTime DateTime @default(now())
  page        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  message     String
}

model Site {
  id                 Int                  @id @default(autoincrement())
  name               String               @unique
  ownerId            Int
  owner              User                 @relation(fields: [ownerId], references: [id])
  schema             Json?
  SiteNode           SiteNode[]
  SiteRole           SiteRole[]
  SiteRoleInvitation SiteRoleInvitation[]
  SiteToken          SiteToken[]
  SiteEvent          SiteEvent[]
}

model SiteNode {
  id            Int        @id @default(autoincrement())
  key           String
  siteId        Int
  site          Site       @relation(fields: [siteId], references: [id])
  parentNodeId  Int?
  parentNode    SiteNode?  @relation(fields: [parentNodeId], references: [id])
  schema        Json?
  value         Json?
  version       Int        @default(0)
  schemaVersion Int        @default(0)
  versionTime   DateTime?
  SiteNode      SiteNode[] @relation("SiteNodeToSiteNode")

  NodeRole NodeRole[]

  SiteEvent SiteEvent[]
  @@unique([siteId, key, parentNodeId], name: "SiteNodeId")
}

model SiteEvent {
  id           Int       @id @default(autoincrement())
  requestTime  DateTime  @default(now())
  completeTime DateTime  @default(now())
  eventName    String
  siteId       Int
  address      String[]
  site         Site      @relation(fields: [siteId], references: [id])
  payload      Json?
  userId       Int?
  user         User?     @relation(fields: [userId], references: [id])
  siteNodeId   Int?
  siteNode     SiteNode? @relation(fields: [siteNodeId], references: [id])
}

model HostEvent {
  id       Int      @id @default(autoincrement())
  saveTime DateTime @default(now())
  host     String
  events   Json
}

model SiteToken {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now())
  siteId     Int
  site       Site     @relation(fields: [siteId], references: [id])
  label      String
  type       String
  token      String   @unique
}

model NodeRole {
  id         Int      @id @default(autoincrement())
  siteNodeId Int
  siteNode   SiteNode @relation(fields: [siteNodeId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  name       String
}

model SiteRole {
  id     Int    @id @default(autoincrement())
  siteId Int
  site   Site   @relation(fields: [siteId], references: [id])
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  name   String

  @@unique([siteId, userId], name: "SiteRoleUnique")
}

model SiteRoleInvitation {
  id              Int       @id @default(autoincrement())
  inviteTime      DateTime  @default(now())
  siteId          Int
  site            Site      @relation(fields: [siteId], references: [id])
  recipientUserId Int?
  recipientUser   User?     @relation("InviteRecipientRelation", fields: [recipientUserId], references: [id])
  fromUserId      Int
  fromUser        User      @relation("InviteSenderRelation", fields: [fromUserId], references: [id])
  acceptedTime    DateTime?
  dismissTime     DateTime?
  name            String // this is the eventual SiteRole.name
  toEmail         String?

  @@unique([siteId, recipientUserId, toEmail], name: "SiteRoleInviteUnique")
}
