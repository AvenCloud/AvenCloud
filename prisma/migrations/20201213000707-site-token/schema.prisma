datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  Int       @id @default(autoincrement())
  username            String    @unique
  email               String?   @unique
  phone               String?   @unique
  name                String?
  passwordHash        String?
  stripeCustomerId    String?
  giftedAccess        Int       @default(0)
  subscribedAccess    Int       @default(0)
  subscriptionEndTime DateTime?
  publicBio           String?
  Comment             Comment[]
  Clip                Clip[]

  Sites           Site[]
  EmailValidation EmailValidation[]
  VerifiedEmail   VerifiedEmail[]
  SiteRole        SiteRole[]
  NodeRole        NodeRole[]
  SiteInvite      SiteRoleInvitation[] @relation("InviteSenderRelation")
  SiteInviteSent  SiteRoleInvitation[] @relation("InviteRecipientRelation")
}

model EmailValidation {
  id        Int      @id @default(autoincrement())
  emailTime DateTime @default(now())
  email     String
  secret    String   @unique
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
}

model VerifiedEmail {
  email      String   @id
  verifyTime DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}

model PhoneValidation {
  id       Int      @id @default(autoincrement())
  sendTime DateTime @default(now())
  phone    String
  secret   String   @unique
}

model Comment {
  id          Int      @id @default(autoincrement())
  publishTime DateTime @default(now())
  page        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  message     String
}

// Cloud 2

model Site {
  id      Int    @id @default(autoincrement())
  name    String @unique
  ownerId Int
  owner   User   @relation(fields: [ownerId], references: [id])

  SiteNode           SiteNode[]
  SiteRole           SiteRole[]
  SiteRoleInvitation SiteRoleInvitation[]
  SiteToken          SiteToken[]
}

model SiteNode {
  id           Int       @id @default(autoincrement())
  key          String
  siteId       Int
  site         Site      @relation(fields: [siteId], references: [id])
  parentNodeId Int?
  parentNode   SiteNode? @relation(fields: [parentNodeId], references: [id])
  schema       Json?
  value        Json?

  SiteNode SiteNode[] @relation("SiteNodeToSiteNode")

  NodeRole NodeRole[]

  @@unique([siteId, key, parentNodeId], name: "SiteNodeId")
}

model SiteToken {
  id         Int      @id @default(autoincrement())
  createTime DateTime @default(now())
  siteId     Int
  site       Site     @relation(fields: [siteId], references: [id])
  label      String
  type       String
  token      String   @unique
}

model NodeRole {
  id         Int      @id @default(autoincrement())
  siteNodeId Int
  siteNode   SiteNode @relation(fields: [siteNodeId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  name       String
}

model SiteRole {
  id     Int    @id @default(autoincrement())
  siteId Int
  site   Site   @relation(fields: [siteId], references: [id])
  userId Int
  user   User   @relation(fields: [userId], references: [id])
  name   String // 
}

model SiteRoleInvitation {
  id              Int       @id @default(autoincrement())
  inviteTime      DateTime  @default(now())
  siteId          Int
  site            Site      @relation(fields: [siteId], references: [id])
  recipientUserId Int?
  recipientUser   User?     @relation("InviteRecipientRelation", fields: [recipientUserId], references: [id])
  fromUserId      Int
  fromUser        User      @relation("InviteSenderRelation", fields: [fromUserId], references: [id])
  acceptedTime    DateTime?
  dismissTime     DateTime?
  name            String // this is the eventual SiteRole.name
  toEmail         String?

  @@unique([siteId, recipientUserId, toEmail], name: "SiteRoleInviteUnique")
}

// ClipClock

model Clip {
  id          Int       @id @default(autoincrement())
  draftTime   DateTime  @default(now())
  publishTime DateTime?
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  caption     String?
  tags        ClipTag[]
}

model Tag {
  id      String    @id
  ClipTag ClipTag[]
}

model ClipTag {
  clipId Int
  clip   Clip   @relation(fields: [clipId], references: [id])
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@unique([clipId, tagId], name: "ClipTag_id")
}
